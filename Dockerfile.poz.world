ARG TAG=nightly \
    AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING}  \
    AZURE_STORAGE_CONTAINER_NAME=${AZURE_STORAGE_CONTAINER_NAME} \
    MASTODON_VERSION_METADATA=${MASTODON_VERSION_METADATA:-''} \
    MASTODON_VERSION_PRERELEASE=${MASTODON_VERSION_PRERELEASE:-'nightly'}

FROM ghcr.io/mastodon/mastodon:${TAG} AS base

USER root

# Install bash if not already available
RUN apt-get update && apt-get install -y bash

SHELL [ "bash", "-c" ]

ENV TZ=EST5EDT \
    WEBSITE_TIME_ZONE=EST5EDT \
    PATH="${PATH}:/opt/ruby/bin:/opt/mastodon/bin" \
    RAILS_ENV=production \
    NODE_ENV=production \
    AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING}  \
    AZURE_STORAGE_CONTAINER_NAME=${AZURE_STORAGE_CONTAINER_NAME} \
    MASTODON_VERSION_METADATA=${MASTODON_VERSION_METADATA} \
    MASTODON_VERSION_PRERELEASE=${MASTODON_VERSION_PRERELEASE}

RUN mkdir -p /app;
RUN mkdir -p /run/sshd;
RUN mkdir -p /usr/local/nvm
RUN ln -s /opt/mastodon /app/www;
RUN apt-get update;
RUN apt-get install -y --no-install-recommends dialog;
RUN apt-get install -y --no-install-recommends \
    openssh-server \
    nginx \
    build-essential \ 
    libssl-dev \
    git \
    libicu-dev \
    libidn11-dev \
    libpq-dev && \
    echo "root:Docker!" | chpasswd 

ENV NVM_DIR=/usr/local/nvm
ENV NODE_VERSION=22
ENV NVM_VERSION=0.40.1

# install nvm
# https://github.com/creationix/nvm#install-script
RUN curl --silent -o- https://raw.githubusercontent.com/creationix/nvm/v${NVM_VERSION}/install.sh | bash

# install node and npm
RUN source $NVM_DIR/nvm.sh \
    && nvm install $NODE_VERSION \
    && nvm alias default $NODE_VERSION \
    && nvm use default

# add node and npm to path so the commands are available
ENV NODE_PATH=$NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH=$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

WORKDIR /opt/mastodon

EXPOSE 8080 2222

RUN \ 
    rm -rf /usr/bin/bundle && \
    ln -s /opt/mastodon/bin/bundle /usr/bin/bundle;

COPY ./root /
COPY . /opt/mastodon/
COPY config /config

RUN \ 
    mkdir -p vendor/bundle && \
    bundle clean --force && \
    # Configure bundle to prevent changes to Gemfile and Gemfile.lock
    bundle config set --global frozen "true"; \
    # Configure bundle to not cache downloaded Gems
    bundle config set --global cache_all "false"; \
    # Configure bundle to only process production Gems
    bundle config set --local without "development test"; \
    # Configure bundle to not warn about root user
    bundle config set silence_root_warning "true"; \
    bundle config set --global path $(readlink -f "vendor/bundle"); \
    # Download and install required Gems
    bundle install -j"$(nproc)"
# Use Ruby on Rails to create Mastodon assets

RUN \ 
    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
    SECRET_KEY_BASE_DUMMY=1 \
    bundle exec rake assets:precompile; 

RUN \
    mkdir -p /var/log/supervisor && \
    mkdir -p /var/log/nginx && \
    mkdir -p /var/log/sshd && \
    mkdir -p /var/log/sidekiq && \
    mkdir -p /var/log/streaming

ENTRYPOINT ["/bin/bash", "/opt/mastodon/bin/entrypoint"]

LABEL org.opencontainers.image.description="Modifications to the base image for the site POZ.world"
LABEL org.opencontainers.image.source="https://github.com/justinwritescode/mastodon"
LABEL org.opencontainers.image.licenses="MIT"