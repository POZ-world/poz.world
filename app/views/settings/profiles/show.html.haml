- content_for :page_title do
  = t('settings.edit_profile')

- content_for :heading do
  %h2= t('settings.profile')
  = render partial: 'settings/shared/profile_navigation'

= simple_form_for @account, url: settings_profile_path, html: { method: :put, id: 'edit_profile' } do |f|
  = render 'shared/error_messages', object: @account

  %p.lead= t('edit_profile.hint_html')

  %h4= t('edit_profile.basic_information')

  .fields-row
    .fields-row__column.fields-row__column-6
      .fields-group
        = f.input :display_name, wrapper: :with_block_label, input_html: { maxlength: 30, data: { default: @account.username } }

      .fields-group
        = f.input :note, wrapper: :with_block_label, input_html: { maxlength: 500 }

    .fields-row__column.fields-group.fields-row__column-6
      .input.with_block_label
        %label= t('simple_form.labels.defaults.fields')
        %span.hint= t('simple_form.hints.account.fields')

        - puts '@account.fields.inspect: ' + @account.fields.inspect
        - puts '@account.fields.class: ' + @account.fields.class.name

        // Existing Fields Rendering
        = f.simple_fields_for :fields, @account.fields do |fields_f|
          .row
            = fields_f.input :name, input_html: { value: fields_f.object.name, name: "account[fields_attributes][#{fields_f.index}][name]" }
            - template = FieldTemplate.find_by(name: fields_f.object.name)
            - if template&.dropdown
              = fields_f.input :value, as: :select, collection: template.dropdown_options.map { |option| [option.value, option.value, { title: option.description }] }, include_blank: false, input_html: { name: "account[fields_attributes][#{fields_f.index}][value]", value: fields_f.object.value, class: 'dropdown-with-tooltip' }
            - else
              = fields_f.input :value, placeholder: template&.default_value || t('simple_form.labels.account.fields.value'), input_html: { maxlength: 255, name: "account[fields_attributes][#{fields_f.index}][value]", value: fields_f.object.value }

        .new-fields-container

  .buttons
    %button.add-field-btn = t('settings.add_field')

  .fields-row
    .fields-row__column.fields-row__column-6
      .fields-group
        = f.input :avatar,
                  hint: t('simple_form.hints.defaults.avatar', dimensions: '400x400', size: number_to_human_size(Account::Avatar::LIMIT)),
                  input_html: { accept: Account::Avatar::IMAGE_MIME_TYPES.join(',') },
                  wrapper: :with_block_label

    .fields-row__column.fields-row__column-6
      .fields-group
        = image_tag @account.avatar.url, class: 'fields-group__thumbnail', id: 'account_avatar-preview'
        - if @account.avatar.present?
          = link_to settings_profile_picture_path('avatar'), data: { method: :delete }, class: 'link-button link-button--destructive' do
            = material_symbol 'delete'
            = t('generic.delete')

  .fields-row
    .fields-row__column.fields-row__column-6
      .fields-group
        = f.input :header,
                  hint: t('simple_form.hints.defaults.header', dimensions: '1500x500', size: number_to_human_size(Account::Header::LIMIT)),
                  input_html: { accept: Account::Header::IMAGE_MIME_TYPES.join(',') },
                  wrapper: :with_block_label

    .fields-row__column.fields-row__column-6
      .fields-group
        = image_tag @account.header.url, class: 'fields-group__thumbnail', id: 'account_header-preview'
        - if @account.header.present?
          = link_to settings_profile_picture_path('header'), data: { method: :delete }, class: 'link-button link-button--destructive' do
            = material_symbol 'delete'
            = t('generic.delete')

  %h4= t('edit_profile.other')

  .fields-group
    = f.input :bot, as: :boolean, wrapper: :with_label, hint: t('simple_form.hints.defaults.bot')

  .actions
    = f.button :button, t('generic.save_changes'), type: :submit

:javascript
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelector('.add-field-btn').addEventListener('click', function(e) {
      e.preventDefault();
      const fieldIndex = document.querySelectorAll('.new-fields-container .row').length + document.querySelectorAll('.fields-container .row').length;
      const newFieldHTML = `
        <div class="row">
          <input name="account[fields_attributes][${fieldIndex}][name]" placeholder="Field Name" maxlength="255" type="text" />
          <input name="account[fields_attributes][${fieldIndex}][value]" placeholder="Field Value" maxlength="255" type="text" />
        </div>`;
      document.querySelector('.new-fields-container').insertAdjacentHTML('beforeend', newFieldHTML);
    });
  });

  document.addEventListener('DOMContentLoaded', function() {
    tippy('.dropdown-with-tooltip option', {
      content: (reference) => reference.getAttribute('title'),
      placement: 'top',
    });
  });